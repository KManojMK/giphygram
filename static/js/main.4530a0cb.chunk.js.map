{"version":3,"sources":["types/giphyTypes.js","components/searchItem/SearchItem.js","components/shared/spinner/Spinner.js","services/LayoutService.js","components/shared/masonryGrid/MasonryGrid.js","components/searchResults/SearchResults.js","components/shared/infiniteScroll/InfiniteScroll.js","config.js","services/RequestService.js","actions/searchParamsActions.js","reducers/searchParamsReducer.js","services/GiphyService.js","reducers/searchResultsReducer.js","actions/searchActions.js","actions/layoutActions.js","reducers/layoutReducer.js","containers/searchResultsContainer/SearchResultsContainer.js","components/searchSummary/SearchSummary.js","containers/searchSummaryContainer/SearchSummaryContainer.js","components/searchViewTabs/SearchViewTabs.js","containers/searchViewTabsContainer/SearchViewTabsContainer.js","components/searchPage/SearchPage.js","services/RouterService.js","Routes.js","components/searchForm/SearchForm.js","containers/searchFormContainer/SearchFormContainer.js","components/shared/header/Header.js","components/shared/layout/Layout.js","types/reduxTypes.js","containers/layoutContainer/LayoutContainer.js","App.js","reducers/rootReducer.js","store.js","index.js"],"names":["gifImagePropType","PropTypes","shape","url","string","width","height","size","mp4","mp4_size","webp","webp_size","gifImagesPropType","fixed_height_still","original_still","fixed_width","fixed_height_small_still","fixed_height_downsampled","preview","fixed_height_small","downsized_still","downsized","downsized_large","fixed_width_small_still","preview_webp","fixed_width_still","fixed_width_small","downsized_small","fixed_width_downsampled","downsized_medium","original","fixed_height","looping","original_mp4","preview_gif","SearchItem","title","_score","number","type","id","slug","bitly_gif_url","bitly_url","embed_url","username","source","rating","content_url","source_tld","source_post_url","is_sticker","import_datetime","trending_datetime","images","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","item","props","react_default","a","createElement","className","href","border","src","alt","React","Component","Spinner","SCREEN_SIZES","xl","mediaQuery","lg","md","sm","xs","LayoutService","screenSize","responsiveColumnsNum","manualColumnsNum","MasonryGrid","_this$props","items","columnsNum","renderItem","columnsSizes","Array","fill","itemsPartitions","map","forEach","itemColumnIndex","indexOf","Math","min","toConsumableArray","push","content","columns","partition","partitionIndex","columnClass","concat","columnElements","index","defaultProps","SearchResults","_getPrototypeOf2","_this","_len","length","args","_key","call","renderSearchItem","searchItem","SearchItem_SearchItem","searchItems","isLoading","Spinner_Spinner","gridItems","parseInt","MasonryGrid_MasonryGrid","InfiniteScroll","onScroll","activationDistance","onFetchMore","documentHeight","document","body","offsetHeight","window","innerHeight","scrollY","addEventListener","removeEventListener","children","env","objectSpread","process","APP_BASE_URL","REACT_APP_BASE_URL","GIPHY_API_KEY","REACT_APP_GIPHY_API_KEY","GIPHY_API_HOST","REACT_APP_GIPHY_API_HOST","REQUEST_TIMEOUT","HTTP_REQUEST_TIMEOUT","SEARCH_BATCH_SIZE","RequestService","params","undefined","axios","get","getDefaultAxiosConfig","timeout","SEARCH_PARAMS_ACTION_TYPES","UPDATE_SEARCH_QUERY","UPDATE_SEARCH_OFFSET","updateSearchQuery","searchQuery","payload","defaultSearchParams","query","limit","offset","lang","getSearchParamsFromState","state","searchParams","GiphyService","_ref","_ref$query","_ref$limit","_ref$offset","_ref$rating","_ref$lang","api_key","q","defaultSearchResults","data","pagination","meta","isFetchingMore","error","getSearchResultsFromState","searchResults","SEARCH_ACTION_TYPES","SEARCH","SEARCH_MORE","SEARCH_RESET","search","LAYOUT_ACTION_TYPES","RESIZE","SET_COLUMNS_NUM","defaultLayoutSetting","getLayoutFromState","layout","SearchResultsContainer","searchMoreCallback","searchMore","_this$props2","fetchMoreSpinner","InfiniteScroll_InfiniteScroll","SearchResults_SearchResults","mapDispatchToProps","batchSize","dispatch","getState","_getSearchResultsFrom","_getSearchResultsFrom2","totalCount","total_count","updateSearchOffset","connect","screenSizeToColumns","choseColumnsNum","SearchSummary","total","SearchSummaryContainer","SearchSummary_SearchSummary","prototype","hasOwnProperty","columnButtons","icon","SearchViewTabs","onButtonClick","onColumnsNumbChange","_this2","buttons","columnButton","buttonClass","onClick","SearchViewTabsContainer","onColumnsNumChange","columnsNumCallback","setColumnsNum","isHidden","SearchViewTabs_SearchViewTabs","SearchPage","Fragment","searchSummaryContainer_SearchSummaryContainer","searchViewTabsContainer_SearchViewTabsContainer","searchResultsContainer_SearchResultsContainer","RouterService","history","location","URLSearchParams","Routes","routerService","searchQueryFromLocationCallback","searchCallback","searchQueryFromLocation","getSearchQuery","Switch","Route","path","component","withRouter","SearchForm","onQueryChange","event","onSearchUpdate","target","onSearchSubmit","preventDefault","onSearchReset","resetElement","onSubmit","placeholder","onChange","spellCheck","autoCapitalize","autoComplete","maxLength","SearchFormContainer","pushSearchQuery","updateSearchQueryCallback","searchResetCallback","searchReset","SearchForm_SearchForm","HeaderRaw","Link","to","searchFormContainer_SearchFormContainer","Header","Layout","func","isRequired","subscribe","replaceReducer","mediaQueries","onMediaQueryChange","initialScreenSize","values","screenSizeEntity","matchMedia","matches","addListener","e","removeListener","LayoutContainer","layoutResizeCallback","layoutResize","Layout_Layout","layoutSize","App","store","es","BrowserRouter","basename","layoutContainer_LayoutContainer","src_Routes","rootReducer","combineReducers","action","payloadData","ActionType","Pending","Fulfilled","Rejected","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","middleware","applyMiddleware","promise","thunk","createStore","rootContainer","getElementById","ReactDOM","render","App_App"],"mappings":"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","file":"static/js/main.4530a0cb.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\n// PropType for Giphy Image entity.\nexport const gifImagePropType = PropTypes.shape({\n  url: PropTypes.string,\n  width: PropTypes.string,\n  height: PropTypes.string,\n  size: PropTypes.string,\n  mp4: PropTypes.string,\n  mp4_size: PropTypes.string,\n  webp: PropTypes.string,\n  webp_size: PropTypes.string,\n});\n\n// PropType for Giphy images set.\nexport const gifImagesPropType = PropTypes.shape({\n  fixed_height_still: gifImagePropType,\n  original_still: gifImagePropType,\n  fixed_width: gifImagePropType,\n  fixed_height_small_still: gifImagePropType,\n  fixed_height_downsampled: gifImagePropType,\n  preview: gifImagePropType,\n  fixed_height_small: gifImagePropType,\n  downsized_still: gifImagePropType,\n  downsized: gifImagePropType,\n  downsized_large: gifImagePropType,\n  fixed_width_small_still: gifImagePropType,\n  preview_webp: gifImagePropType,\n  fixed_width_still: gifImagePropType,\n  fixed_width_small: gifImagePropType,\n  downsized_small: gifImagePropType,\n  fixed_width_downsampled: gifImagePropType,\n  downsized_medium: gifImagePropType,\n  original: gifImagePropType,\n  fixed_height: gifImagePropType,\n  looping: gifImagePropType,\n  original_mp4: gifImagePropType,\n  preview_gif: gifImagePropType,\n});\n\n// PropType for the Giphy search result entity.\nexport const gifEntityPropType = PropTypes.shape({\n  title: PropTypes.string,\n  _score: PropTypes.number,\n  type: PropTypes.string,\n  id: PropTypes.string,\n  slug: PropTypes.string,\n  url: PropTypes.string,\n  bitly_gif_url: PropTypes.string,\n  bitly_url: PropTypes.string,\n  embed_url: PropTypes.string,\n  username: PropTypes.string,\n  source: PropTypes.string,\n  rating: PropTypes.string,\n  content_url: PropTypes.string,\n  source_tld: PropTypes.string,\n  source_post_url: PropTypes.string,\n  is_sticker: PropTypes.number,\n  import_datetime: PropTypes.string,\n  trending_datetime: PropTypes.string,\n  images: gifImagesPropType,\n});\n","import React from 'react';\nimport { gifEntityPropType } from '../../types/giphyTypes';\nimport './searchItem.css';\n\nexport class SearchItem extends React.Component {\n  static propTypes = {\n    item: gifEntityPropType.isRequired,\n  };\n\n  render() {\n    const { item } = this.props;\n\n    return (\n      <div className=\"w-100 mb-3 search-item\">\n        <a href={item.url}>\n          <img\n            className=\"w-100\"\n            border=\"0\"\n            src={item.images.fixed_width.url}\n            alt={item.title}\n            title={item.title}\n          />\n        </a>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './spinner.css';\n\nexport class Spinner extends React.Component {\n  render() {\n    return (\n      <div className=\"spinner-container text-center\">\n        <div className=\"spinner\" />\n      </div>\n    );\n  }\n}\n","// Set of screen sizes that app is supporting.\nexport const SCREEN_SIZES = {\n  xl: { id: 'xl', mediaQuery: '(min-width: 1200px)' },\n  lg: { id: 'lg', mediaQuery: '(max-width: 1200px) and (min-width: 960px)' },\n  md: { id: 'md', mediaQuery: '(max-width: 950px) and (min-width: 720px)' },\n  sm: { id: 'sm', mediaQuery: '(max-width: 720px) and (min-width: 540px)' },\n  xs: { id: 'xs', mediaQuery: '(max-width: 540px)' },\n};\n\n// Supported number of columns in 12-column templates.\nexport const SUPPORTED_COLUMNS_NUMS = [1, 2, 3, 4, 6, 12];\n\nexport const DEFAULT_COLUMNS_NUM = 3;\n\nexport const TOTAL_NUMBER_OF_LAYOUT_COLUMNS = 12;\n\nexport class LayoutService {\n  /**\n   * Get default number of columns for 12-column template depending on screen size.\n   * @param {string} screenSize\n   * @return {number}\n   */\n  static screenSizeToColumns(screenSize) {\n    switch (screenSize) {\n      case SCREEN_SIZES.xs.id:\n        return 1;\n\n      case SCREEN_SIZES.sm.id:\n      case SCREEN_SIZES.md.id:\n        return 3;\n\n      case SCREEN_SIZES.lg.id:\n      case SCREEN_SIZES.xl.id:\n        return 4;\n\n      default:\n        return DEFAULT_COLUMNS_NUM;\n    }\n  }\n\n  /**\n   * Chooses the number of layout columns from manual and automatic one.\n   * @param {?number} responsiveColumnsNum - number of layout columns according to window size\n   * @param {?number} manualColumnsNum - number of layout columns according to user selection.\n   * @return {number}\n   */\n  static choseColumnsNum(responsiveColumnsNum, manualColumnsNum) {\n    // Manual column selection has higher priority than automatic columns number\n    // calculated based on window size.\n    return manualColumnsNum || responsiveColumnsNum;\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { SUPPORTED_COLUMNS_NUMS, TOTAL_NUMBER_OF_LAYOUT_COLUMNS } from '../../../services/LayoutService';\n\nexport class MasonryGrid extends React.Component {\n  static propTypes = {\n    renderItem: PropTypes.func.isRequired,\n    columnsNum: PropTypes.oneOf(SUPPORTED_COLUMNS_NUMS).isRequired,\n    items: PropTypes.arrayOf(PropTypes.shape({\n      height: PropTypes.number,\n      content: PropTypes.object,\n    })),\n  };\n\n  static defaultProps = {\n    items: [],\n  };\n\n  render() {\n    const { items, columnsNum, renderItem } = this.props;\n\n    // Array that will store the height of each column.\n    // It is used to keep column heights similar.\n    const columnsSizes = new Array(columnsNum).fill(0);\n\n    // Array that will store items that are split by columns according to their heights.\n    const itemsPartitions = new Array(columnsNum)\n      .fill(null)\n      .map(() => []);\n\n    // Fill partitions with items.\n    items.forEach((item) => {\n      // Get next smallest column to place the icon into.\n      const itemColumnIndex = columnsSizes.indexOf(Math.min(...columnsSizes));\n      // Increase the size of the column by item height.\n      columnsSizes[itemColumnIndex] += item.height;\n      // Put item to the proper partition.\n      itemsPartitions[itemColumnIndex].push(item.content);\n    });\n\n    // Generate columns with search items inside.\n    const columns = itemsPartitions.map((partition, partitionIndex) => {\n      /* eslint-disable react/no-array-index-key */\n\n      // Calculate Bootstrap class depending on the columns num.\n      const columnClass = `col-${TOTAL_NUMBER_OF_LAYOUT_COLUMNS / columnsNum}`;\n\n      // Generate column entities.\n      const columnElements = partition.map(\n        (item, index) => renderItem(item, index),\n      );\n\n      // Wrap column entities into column wrapper.\n      return (\n        <div className={columnClass} key={partitionIndex}>\n          {columnElements}\n        </div>\n      );\n    });\n\n    return (\n      <div className=\"row\">\n        {columns}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { SearchItem } from '../searchItem/SearchItem';\nimport { Spinner } from '../shared/spinner/Spinner';\nimport { MasonryGrid } from '../shared/masonryGrid/MasonryGrid';\nimport { DEFAULT_COLUMNS_NUM, SUPPORTED_COLUMNS_NUMS } from '../../services/LayoutService';\n\nexport class SearchResults extends React.Component {\n  static propTypes = {\n    searchItems: PropTypes.arrayOf(PropTypes.object),\n    isLoading: PropTypes.bool,\n    columnsNum: PropTypes.oneOf(SUPPORTED_COLUMNS_NUMS),\n  };\n\n  static defaultProps = {\n    searchItems: [],\n    isLoading: false,\n    columnsNum: DEFAULT_COLUMNS_NUM,\n  };\n\n  renderSearchItem = searchItem => (\n    <SearchItem item={searchItem} key={searchItem.id} />\n  );\n\n  render() {\n    const { searchItems, isLoading, columnsNum } = this.props;\n\n    if (isLoading) {\n      return <Spinner />;\n    }\n\n    const gridItems = searchItems.map(searchItem => ({\n      height: parseInt(searchItem.images.fixed_width.height, 10),\n      content: searchItem,\n    }));\n\n    return (\n      <div className=\"mb-3\">\n        <MasonryGrid\n          items={gridItems}\n          renderItem={this.renderSearchItem}\n          columnsNum={columnsNum}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst DEFAULT_ACTIVATION_DISTANCE = 50;\n\nexport class InfiniteScroll extends React.Component {\n  static propTypes = {\n    children: PropTypes.oneOfType([\n      PropTypes.arrayOf(PropTypes.node),\n      PropTypes.node,\n    ]).isRequired,\n    onFetchMore: PropTypes.func,\n    activationDistance: PropTypes.number,\n  };\n\n  static defaultProps = {\n    onFetchMore: () => {},\n    activationDistance: DEFAULT_ACTIVATION_DISTANCE,\n  };\n\n  componentDidMount() {\n    window.addEventListener('scroll', this.onScroll, false);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('scroll', this.onScroll, false);\n  }\n\n  onScroll = () => {\n    const { activationDistance, onFetchMore } = this.props;\n\n    const documentHeight = document.body.offsetHeight;\n    const scrollHeight = window.innerHeight + window.scrollY;\n\n    if ((scrollHeight + activationDistance) >= documentHeight) {\n      onFetchMore();\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n\n    return (\n      <div>\n        {children}\n      </div>\n    );\n  }\n}\n","// Shortcut for environment variables container.\nconst env = { ...process.env };\n\n// Base URL of the App. It allows putting the APP into sub-folders on the server.\nexport const APP_BASE_URL = env.REACT_APP_BASE_URL;\n\n// GIPHY API key.\nexport const GIPHY_API_KEY = env.REACT_APP_GIPHY_API_KEY;\n\n// GIPHY API Host.\nexport const GIPHY_API_HOST = env.REACT_APP_GIPHY_API_HOST;\n\n// HTTP request timeout in milliseconds.\nexport const REQUEST_TIMEOUT = env.HTTP_REQUEST_TIMEOUT;\n\n// How many Gif images we want to request per each HTTP request.\nexport const SEARCH_BATCH_SIZE = 30;\n","import axios from 'axios';\nimport { REQUEST_TIMEOUT } from '../config';\n\n// RequestService is created as a wrapper on top of axios. This is done in order to be able to\n// switch to new http-requests library if needed. Utilizing interfaces might be a good option here.\nexport class RequestService {\n  // Perform GET request with parameters.\n  static get(url, params = {}) {\n    return axios.get(\n      url,\n      { ...this.getDefaultAxiosConfig(), params },\n    );\n  }\n\n  // Generate default Axios configuration for requests.\n  // We may put here default timeouts etc.\n  static getDefaultAxiosConfig() {\n    return {\n      timeout: REQUEST_TIMEOUT,\n    };\n  }\n}\n","export const SEARCH_PARAMS_ACTION_TYPES = {\n  UPDATE_SEARCH_QUERY: 'UPDATE_SEARCH_QUERY',\n  UPDATE_SEARCH_OFFSET: 'UPDATE_SEARCH_OFFSET',\n};\n\n/**\n * Update the value of search query.\n * @param {string} searchQuery\n */\nexport function updateSearchQuery(searchQuery) {\n  return {\n    type: SEARCH_PARAMS_ACTION_TYPES.UPDATE_SEARCH_QUERY,\n    payload: searchQuery,\n  };\n}\n\n/**\n * Update current search offset.\n * @param {number} offset\n */\nexport function updateSearchOffset(offset) {\n  return {\n    type: SEARCH_PARAMS_ACTION_TYPES.UPDATE_SEARCH_OFFSET,\n    payload: offset,\n  };\n}\n","import { SEARCH_PARAMS_ACTION_TYPES } from '../actions/searchParamsActions';\nimport { SEARCH_ACTION_TYPES } from '../actions/searchActions';\nimport { SEARCH_BATCH_SIZE } from '../config';\n\n/**\n * @typedef SearchParamsState\n * @type {object}\n * @property {string} query - search query string.\n * @property {number} limit - number of gifs that are being fetched per one search request.\n * @property {number} offset - offset of the search results.\n * @property {string} rating - gifs rating.\n * @property {string} lang - gifs language.\n */\n\n/**\n * @type {SearchParamsState}\n */\nexport const defaultSearchParams = {\n  query: '',\n  limit: SEARCH_BATCH_SIZE,\n  offset: 0,\n  rating: 'G',\n  lang: 'en',\n};\n\n// Search params reducer is responsible for storing current search parameters (query, offset etc.)\nexport const searchParamsReducer = (state = defaultSearchParams, action) => {\n  switch (action.type) {\n    case SEARCH_ACTION_TYPES.SEARCH_RESET:\n      return { ...defaultSearchParams };\n\n    case SEARCH_PARAMS_ACTION_TYPES.UPDATE_SEARCH_QUERY:\n      return { ...state, query: action.payload };\n\n    case SEARCH_PARAMS_ACTION_TYPES.UPDATE_SEARCH_OFFSET:\n      return { ...state, offset: action.payload };\n\n    default:\n      return state;\n  }\n};\n\n/**\n * Extracts search parameters from the store.\n * This is a helper function that allows us to change store structure easily\n * without changing the components.\n *\n * @param {object} state\n * @return {SearchParamsState}\n */\nexport const getSearchParamsFromState = state => state.searchParams;\n","import { RequestService } from './RequestService';\nimport { GIPHY_API_HOST, GIPHY_API_KEY } from '../config';\nimport { defaultSearchParams } from '../reducers/searchParamsReducer';\n\n// GiphyService is responsible for all integrations with Giphy API.\nexport class GiphyService {\n  // Search for GIFs by specific search query.\n  static search({\n    query = defaultSearchParams.query,\n    limit = defaultSearchParams.limit,\n    offset = defaultSearchParams.offset,\n    rating = defaultSearchParams.rating,\n    lang = defaultSearchParams.lang,\n  } = {}) {\n    const searchParams = {\n      api_key: GIPHY_API_KEY,\n      q: query,\n      limit,\n      offset,\n      rating,\n      lang,\n    };\n\n    return RequestService.get(\n      `${GIPHY_API_HOST}/v1/gifs/search`,\n      searchParams,\n    );\n  }\n}\n","import { ActionType } from 'redux-promise-middleware';\nimport { SEARCH_ACTION_TYPES } from '../actions/searchActions';\n\n/**\n * @typedef SearchResultsState\n * @type {object}\n * @property {*[]} data\n * @property {object} pagination\n * @property {object} meta\n * @property {boolean} isLoading\n * @property {boolean} isFetchingMore\n * @property {object} error\n */\n\n/**\n * @type {SearchResultsState}\n */\nexport const defaultSearchResults = {\n  data: [],\n  pagination: {},\n  meta: {},\n  isLoading: false,\n  isFetchingMore: false,\n  error: null,\n};\n\n// Search results reducer is responsible for storing information from Giphy API.\nexport const searchResultsReducer = (state = defaultSearchResults, action) => {\n  const payloadData = (action.payload && action.payload.data) || null;\n\n  switch (action.type) {\n    case SEARCH_ACTION_TYPES.SEARCH_RESET:\n      return { ...defaultSearchResults };\n\n    case `${SEARCH_ACTION_TYPES.SEARCH}_${ActionType.Pending}`:\n      return {\n        ...state,\n        isLoading: true,\n        isFetchingMore: false,\n        error: null,\n      };\n\n    case `${SEARCH_ACTION_TYPES.SEARCH_MORE}_${ActionType.Pending}`:\n      return {\n        ...state,\n        isLoading: false,\n        isFetchingMore: true,\n        error: null,\n      };\n\n    case `${SEARCH_ACTION_TYPES.SEARCH}_${ActionType.Fulfilled}`:\n      return {\n        ...state,\n        data: payloadData.data,\n        pagination: payloadData.pagination,\n        meta: payloadData.meta,\n        isLoading: false,\n        isFetchingMore: false,\n        error: null,\n      };\n\n    case `${SEARCH_ACTION_TYPES.SEARCH_MORE}_${ActionType.Fulfilled}`:\n      return {\n        ...state,\n        data: [...state.data].concat(payloadData.data),\n        pagination: payloadData.pagination,\n        meta: payloadData.meta,\n        isLoading: false,\n        isFetchingMore: false,\n        error: null,\n      };\n\n    case `${SEARCH_ACTION_TYPES.SEARCH}_${ActionType.Rejected}`:\n      return {\n        ...defaultSearchResults,\n        isLoading: false,\n        isFetchingMore: false,\n        error: true,\n      };\n\n    case `${SEARCH_ACTION_TYPES.SEARCH_MORE}_${ActionType.Rejected}`:\n      return {\n        ...state,\n        isLoading: false,\n        isFetchingMore: false,\n        error: true,\n      };\n\n    default:\n      return state;\n  }\n};\n\n/**\n * Extracts search results from the store.\n * This is a helper function that allows us to change store structure easily\n * without changing the components.\n *\n * @param {object} state\n * @return {SearchResultsState}\n */\nexport const getSearchResultsFromState = state => state.searchResults;\n","import { GiphyService } from '../services/GiphyService';\nimport { updateSearchOffset } from './searchParamsActions';\nimport { SEARCH_BATCH_SIZE } from '../config';\nimport { getSearchParamsFromState } from '../reducers/searchParamsReducer';\nimport { getSearchResultsFromState } from '../reducers/searchResultsReducer';\n\nexport const SEARCH_ACTION_TYPES = {\n  SEARCH: 'SEARCH',\n  SEARCH_MORE: 'SEARCH_MORE',\n  SEARCH_RESET: 'SEARCH_RESET',\n};\n\n/**\n * Search on GIPHY.\n * @param {object} searchParams\n */\nexport function search(searchParams) {\n  return {\n    type: SEARCH_ACTION_TYPES.SEARCH,\n    payload: GiphyService.search(searchParams),\n  };\n}\n\n// Reset search parameters.\nexport function searchReset() {\n  return {\n    type: SEARCH_ACTION_TYPES.SEARCH_RESET,\n    payload: null,\n  };\n}\n\n/**\n * Fetch more search results from GIPHY.\n * @param {number} batchSize\n */\nexport function searchMore(batchSize = SEARCH_BATCH_SIZE) {\n  return (dispatch, getState) => {\n    const state = getState();\n\n    // Fetch total number of results.\n    const { pagination = {}, isFetchingMore, isLoading } = getSearchResultsFromState(state);\n\n    const totalCount = pagination.total_count || 0;\n\n    // Don't fetch anything if fetching is in progress right now.\n    if (isFetchingMore || isLoading) {\n      return null;\n    }\n\n    // Fetch current offset from search params.\n    const searchParams = getSearchParamsFromState(state);\n    const offset = searchParams.offset + batchSize;\n    searchParams.offset = offset;\n\n    // Check whether we want to fetch more results that actually exists on the server.\n    if (offset >= totalCount) {\n      // Nothing to fetch.\n      return null;\n    }\n\n    // Update search offset in the store.\n    dispatch(updateSearchOffset(offset));\n\n    // Fetch new search results and put them to the store.\n    dispatch({\n      type: SEARCH_ACTION_TYPES.SEARCH_MORE,\n      payload: GiphyService.search(searchParams),\n    });\n\n    return null;\n  };\n}\n","export const LAYOUT_ACTION_TYPES = {\n  RESIZE: 'RESIZE',\n  SET_COLUMNS_NUM: 'SET_COLUMNS_NUM',\n};\n\n/**\n * Resize layout automatically depending on the current window size.\n * @param {string} layoutSize\n */\nexport function layoutResize(layoutSize) {\n  return {\n    type: LAYOUT_ACTION_TYPES.RESIZE,\n    payload: layoutSize,\n  };\n}\n\n/**\n * Setup the number of layout columns manually.\n * @param {number} columnsNum\n */\nexport function setColumnsNum(columnsNum) {\n  return {\n    type: LAYOUT_ACTION_TYPES.SET_COLUMNS_NUM,\n    payload: columnsNum,\n  };\n}\n","/**\n * @typedef LayoutState\n * @type {object}\n * @property {?string} size - screen size name (is being set automatically).\n * @property {?string} manualSize - screen size name (is being set manually).\n */\n\nimport { LAYOUT_ACTION_TYPES } from '../actions/layoutActions';\n\n/**\n * @type {LayoutState}\n */\nexport const defaultLayoutSetting = {\n  size: null,\n  manualColumnsNum: null,\n};\n\n// Layout reducer is responsible for storing layout parameter like screen size etc.\nexport const layoutReducer = (state = defaultLayoutSetting, action) => {\n  switch (action.type) {\n    case LAYOUT_ACTION_TYPES.RESIZE:\n      return { ...state, size: action.payload };\n\n    case LAYOUT_ACTION_TYPES.SET_COLUMNS_NUM:\n      return { ...state, manualColumnsNum: action.payload };\n\n    default:\n      return state;\n  }\n};\n\n/**\n * Extracts layout parameters from the store.\n * This is a helper function that allows us to change store structure easily\n * without changing the components.\n *\n * @param {object} state\n * @return {LayoutState}\n */\nexport const getLayoutFromState = state => state.layout;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { SearchResults } from '../../components/searchResults/SearchResults';\nimport { InfiniteScroll } from '../../components/shared/infiniteScroll/InfiniteScroll';\nimport { Spinner } from '../../components/shared/spinner/Spinner';\nimport { searchMore } from '../../actions/searchActions';\nimport { getSearchResultsFromState } from '../../reducers/searchResultsReducer';\nimport { getLayoutFromState } from '../../reducers/layoutReducer';\nimport { DEFAULT_COLUMNS_NUM, LayoutService, SUPPORTED_COLUMNS_NUMS } from '../../services/LayoutService';\n\nexport class SearchResultsContainer extends React.Component {\n  static propTypes = {\n    searchItems: PropTypes.arrayOf(PropTypes.object),\n    isLoading: PropTypes.bool,\n    isFetchingMore: PropTypes.bool,\n    searchMore: PropTypes.func.isRequired,\n    columnsNum: PropTypes.oneOf(SUPPORTED_COLUMNS_NUMS),\n  };\n\n  static defaultProps = {\n    searchItems: [],\n    isLoading: false,\n    isFetchingMore: false,\n    columnsNum: DEFAULT_COLUMNS_NUM,\n  };\n\n  onFetchMore = () => {\n    const { isFetchingMore, isLoading, searchMore: searchMoreCallback } = this.props;\n\n    if (!isFetchingMore && !isLoading) {\n      searchMoreCallback();\n    }\n  };\n\n  render() {\n    const {\n      searchItems, isLoading, isFetchingMore, columnsNum,\n    } = this.props;\n\n    const fetchMoreSpinner = isFetchingMore ? <Spinner /> : null;\n\n    return (\n      <InfiniteScroll onFetchMore={this.onFetchMore}>\n        <SearchResults\n          searchItems={searchItems}\n          isLoading={isLoading}\n          columnsNum={columnsNum}\n        />\n        {fetchMoreSpinner}\n      </InfiniteScroll>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  const searchResults = getSearchResultsFromState(state);\n  const layout = getLayoutFromState(state);\n\n  // Decide how many columns to display based on responsive width and on user selection.\n  const responsiveColumnsNum = LayoutService.screenSizeToColumns(layout.size);\n  const columnsNum = LayoutService.choseColumnsNum(\n    responsiveColumnsNum,\n    layout.manualColumnsNum,\n  );\n\n  return {\n    searchItems: searchResults.data || [],\n    isLoading: searchResults.isLoading || false,\n    isFetchingMore: searchResults.isFetchingMore || false,\n    columnsNum,\n  };\n};\n\nconst mapDispatchToProps = {\n  searchMore,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(SearchResultsContainer);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport class SearchSummary extends React.Component {\n  static propTypes = {\n    total: PropTypes.number,\n  };\n\n  static defaultProps = {\n    total: null,\n  };\n\n  render() {\n    const { total } = this.props;\n\n    if (total === null) {\n      return null;\n    }\n\n    return (\n      <div className=\"mb-3\">\n        <small>\n          Total results:\n          &nbsp;\n          <span className=\"badge badge-dark\">\n            {total}\n          </span>\n        </small>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { SearchSummary } from '../../components/searchSummary/SearchSummary';\nimport { getSearchResultsFromState } from '../../reducers/searchResultsReducer';\n\nexport class SearchSummaryContainer extends React.Component {\n  static propTypes = {\n    total: PropTypes.number,\n  };\n\n  static defaultProps = {\n    total: null,\n  };\n\n  render() {\n    const { total } = this.props;\n\n    return (\n      <SearchSummary total={total} />\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  const searchResults = getSearchResultsFromState(state);\n  let totalCount = null;\n\n  if (\n    searchResults.isLoading === false\n    && searchResults.pagination\n    && Object.prototype.hasOwnProperty.call(searchResults.pagination, 'total_count')\n  ) {\n    totalCount = searchResults.pagination.total_count;\n  }\n\n  return {\n    total: totalCount,\n  };\n};\n\nexport default connect(mapStateToProps)(SearchSummaryContainer);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { SUPPORTED_COLUMNS_NUMS } from '../../services/LayoutService';\nimport './searchViewTabs.css';\n\nconst columnButtons = [\n  { columns: 1, title: 'Show in 1 column', icon: 'oi oi-list' },\n  { columns: 3, title: 'Show in 3 columns', icon: 'oi oi-grid-three-up' },\n  { columns: 4, title: 'Show in 4 columns', icon: 'oi oi-grid-four-up' },\n];\n\nexport class SearchViewTabs extends React.Component {\n  static propTypes = {\n    columnsNum: PropTypes.oneOf(SUPPORTED_COLUMNS_NUMS).isRequired,\n    onColumnsNumbChange: PropTypes.func.isRequired,\n  };\n\n  onButtonClick = (columnsNum) => {\n    const { onColumnsNumbChange } = this.props;\n    onColumnsNumbChange(columnsNum);\n  };\n\n  render() {\n    const { columnsNum } = this.props;\n\n    const buttons = columnButtons.map((columnButton) => {\n      const buttonClass = columnButton.columns === columnsNum\n        ? 'btn btn-dark tab-selector-button'\n        : 'btn btn-light tab-selector-button';\n\n      return (\n        <button\n          key={`button_${columnButton.columns}`}\n          type=\"button\"\n          className={buttonClass}\n          onClick={() => this.onButtonClick(columnButton.columns)}\n          title={columnButton.title}\n        >\n          <span className={columnButton.icon} />\n        </button>\n      );\n    });\n\n    return (\n      <div className=\"btn-group btn-group-sm mb-3\">\n        {buttons}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { SearchViewTabs } from '../../components/searchViewTabs/SearchViewTabs';\nimport { getLayoutFromState } from '../../reducers/layoutReducer';\nimport { DEFAULT_COLUMNS_NUM, LayoutService, SUPPORTED_COLUMNS_NUMS } from '../../services/LayoutService';\nimport { getSearchResultsFromState } from '../../reducers/searchResultsReducer';\nimport { setColumnsNum } from '../../actions/layoutActions';\n\nexport class SearchViewTabsContainer extends React.Component {\n  static propTypes = {\n    columnsNum: PropTypes.oneOf(SUPPORTED_COLUMNS_NUMS),\n    isHidden: PropTypes.bool.isRequired,\n    setColumnsNum: PropTypes.func.isRequired,\n  };\n\n  static defaultProps = {\n    columnsNum: DEFAULT_COLUMNS_NUM,\n  };\n\n  onColumnsNumChange = (columnsNum) => {\n    const { setColumnsNum: columnsNumCallback } = this.props;\n    columnsNumCallback(columnsNum);\n  };\n\n  render() {\n    const { columnsNum, isHidden } = this.props;\n\n    if (!columnsNum || isHidden) {\n      return null;\n    }\n\n    return (\n      <SearchViewTabs columnsNum={columnsNum} onColumnsNumbChange={this.onColumnsNumChange} />\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  // Extract data from state.\n  const layout = getLayoutFromState(state);\n  const searchResults = getSearchResultsFromState(state);\n\n  // Calculate how many columns we need to display now according to window size.\n  const responsiveColumnsNum = LayoutService.screenSizeToColumns(layout.size);\n\n  // Check whether user has already selected preferred columns number.\n  // Manual selection has higher priority that automatic one.\n  const columnsNum = LayoutService.choseColumnsNum(\n    responsiveColumnsNum,\n    layout.manualColumnsNum,\n  );\n\n  // Decide whether we need to show layout buttons or not depending on search results.\n  let isHidden = true;\n  if (\n    searchResults.isLoading === false\n    && searchResults.pagination\n    && Object.prototype.hasOwnProperty.call(searchResults.pagination, 'total_count')\n  ) {\n    isHidden = false;\n  }\n\n  return {\n    columnsNum,\n    isHidden,\n  };\n};\n\nconst mapDispatchToProps = {\n  setColumnsNum,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(SearchViewTabsContainer);\n","import React from 'react';\nimport SearchResultsContainerConnected from '../../containers/searchResultsContainer/SearchResultsContainer';\nimport SearchSummaryContainerConnected from '../../containers/searchSummaryContainer/SearchSummaryContainer';\nimport SearchViewTabsContainerConnected from '../../containers/searchViewTabsContainer/SearchViewTabsContainer';\n\nexport class SearchPage extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"row\">\n          <div className=\"col-6\">\n            <SearchSummaryContainerConnected />\n          </div>\n          <div className=\"col-6 text-right\">\n            <SearchViewTabsContainerConnected />\n          </div>\n        </div>\n        <SearchResultsContainerConnected />\n      </React.Fragment>\n    );\n  }\n}\n","const SEARCH_QUERY_PARAM = 'query';\n\nexport class RouterService {\n  constructor(history, location) {\n    this.history = history;\n    this.location = location;\n  }\n\n  pushSearchQuery(query = '') {\n    this.history.push({\n      search: query ? `?${SEARCH_QUERY_PARAM}=${query}` : '',\n    });\n  }\n\n  getSearchQuery() {\n    const searchParams = new URLSearchParams(this.location.search);\n    return searchParams.get(SEARCH_QUERY_PARAM);\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Route, Switch, withRouter } from 'react-router-dom';\nimport { SearchPage } from './components/searchPage/SearchPage';\nimport { RouterService } from './services/RouterService';\nimport { updateSearchQuery } from './actions/searchParamsActions';\nimport { search } from './actions/searchActions';\n\nexport class Routes extends React.Component {\n  static propTypes = {\n    routerService: PropTypes.instanceOf(RouterService).isRequired,\n    updateSearchQuery: PropTypes.func.isRequired,\n    search: PropTypes.func.isRequired,\n  };\n\n  componentDidMount() {\n    const {\n      routerService,\n      updateSearchQuery: searchQueryFromLocationCallback,\n      search: searchCallback,\n    } = this.props;\n\n    // Check if search query has been submitted through the URL.\n    // In case if search query is in URL we need to launch the search.\n    const searchQueryFromLocation = routerService.getSearchQuery();\n    if (searchQueryFromLocation) {\n      // Update search form parameters.\n      searchQueryFromLocationCallback(searchQueryFromLocation);\n      // Launch the search and populate the state with search results.\n      searchCallback({ query: searchQueryFromLocation });\n    }\n  }\n\n  render() {\n    // Currently we have only one route. But the next step of the App development might be to create\n    // a dedicated pages for each GIF with additional details. Or to display most trending GIFs\n    // on the /home and search results on the /search page.\n    return (\n      <Switch>\n        <Route path=\"/\" component={SearchPage} />\n      </Switch>\n    );\n  }\n}\n\nconst mapStateToProps = (state, props) => ({\n  routerService: new RouterService(props.history, props.location),\n});\n\nconst mapDispatchToProps = {\n  updateSearchQuery,\n  search,\n};\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps,\n  )(Routes),\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './searchForm.css';\n\nconst inputMaxLength = 512;\n\nexport class SearchForm extends React.Component {\n  static propTypes = {\n    query: PropTypes.string,\n    onSearchSubmit: PropTypes.func,\n    onSearchUpdate: PropTypes.func,\n    onSearchReset: PropTypes.func,\n  };\n\n  static defaultProps = {\n    query: '',\n    onSearchSubmit: () => {},\n    onSearchUpdate: () => {},\n    onSearchReset: () => {},\n  };\n\n  onQueryChange = (event) => {\n    const { onSearchUpdate } = this.props;\n    const query = event.target.value;\n    onSearchUpdate(query);\n  };\n\n  onSearchSubmit = (event) => {\n    event.preventDefault();\n    const { onSearchSubmit, query } = this.props;\n    // Don't fire onSearchSubmit callback when search query is empty.\n    if (query) {\n      onSearchSubmit(query);\n    }\n  };\n\n  onSearchReset = (event) => {\n    event.preventDefault();\n    const { onSearchReset } = this.props;\n    onSearchReset();\n  };\n\n  render() {\n    const { query } = this.props;\n\n    const resetElement = query && query.length ? (\n      <div className=\"input-group-append\">\n        <button\n          className=\"btn btn-light search-reset\"\n          type=\"button\"\n          onClick={this.onSearchReset}\n          title=\"Reset search\"\n        >\n          <span className=\"oi oi-x\" />\n        </button>\n      </div>\n    ) : null;\n\n    return (\n      <form className=\"form\" onSubmit={this.onSearchSubmit}>\n        <div className=\"input-group\">\n          <input\n            className=\"form-control search-input\"\n            type=\"search\"\n            placeholder=\"Search for GIFs\"\n            value={query}\n            onChange={this.onQueryChange}\n            spellCheck={false}\n            autoCapitalize=\"off\"\n            autoComplete=\"off\"\n            maxLength={inputMaxLength}\n          />\n\n          {resetElement}\n\n          <div className=\"input-group-append\">\n            <button\n              className=\"btn btn-dark search-submit\"\n              type=\"submit\"\n              onClick={this.onSearchSubmit}\n              title=\"Search\"\n            >\n              <span className=\"oi oi-magnifying-glass\" />\n            </button>\n          </div>\n        </div>\n      </form>\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { SearchForm } from '../../components/searchForm/SearchForm';\nimport { search, searchReset } from '../../actions/searchActions';\nimport { updateSearchQuery } from '../../actions/searchParamsActions';\nimport { getSearchParamsFromState } from '../../reducers/searchParamsReducer';\nimport { RouterService } from '../../services/RouterService';\n\nexport class SearchFormContainer extends React.Component {\n  static propTypes = {\n    routerService: PropTypes.instanceOf(RouterService).isRequired,\n    search: PropTypes.func.isRequired,\n    searchReset: PropTypes.func.isRequired,\n    updateSearchQuery: PropTypes.func.isRequired,\n    query: PropTypes.string,\n  };\n\n  static defaultProps = {\n    query: '',\n  };\n\n  onSearchSubmit = (query) => {\n    const { search: searchCallback, routerService } = this.props;\n\n    // Update store.\n    searchCallback({ query });\n\n    // Update URL.\n    routerService.pushSearchQuery(query);\n  };\n\n  onSearchUpdate = (query) => {\n    const { updateSearchQuery: updateSearchQueryCallback } = this.props;\n\n    // Update store.\n    updateSearchQueryCallback(query);\n  };\n\n  onSearchReset = () => {\n    const { searchReset: searchResetCallback, routerService } = this.props;\n\n    // Update store.\n    searchResetCallback();\n\n    // Update URL.\n    routerService.pushSearchQuery();\n  };\n\n  render() {\n    const { query } = this.props;\n\n    return (\n      <SearchForm\n        query={query}\n        onSearchSubmit={this.onSearchSubmit}\n        onSearchUpdate={this.onSearchUpdate}\n        onSearchReset={this.onSearchReset}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = (state, props) => ({\n  routerService: new RouterService(props.history, props.location),\n  query: getSearchParamsFromState(state).query,\n});\n\nconst mapDispatchToProps = {\n  search,\n  searchReset,\n  updateSearchQuery,\n};\n\nexport default withRouter(connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(SearchFormContainer));\n","import React from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport SearchFormContainerConnected from '../../../containers/searchFormContainer/SearchFormContainer';\nimport './header.css';\n\nclass HeaderRaw extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1 className=\"text-center italic mt-5 mb-5 logo\">\n          <Link to=\"/\" className=\"text-dark\">\n            GiphyGram\n          </Link>\n        </h1>\n        <div className=\"mb-3\">\n          <SearchFormContainerConnected />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport const Header = withRouter(HeaderRaw);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { SCREEN_SIZES } from '../../../services/LayoutService';\n\nexport class Layout extends React.Component {\n  static propTypes = {\n    children: PropTypes.oneOfType([\n      PropTypes.arrayOf(PropTypes.node),\n      PropTypes.node,\n    ]).isRequired,\n    onMediaQueryChange: PropTypes.func,\n  };\n\n  static defaultProps = {\n    onMediaQueryChange: () => {},\n  };\n\n  constructor(props) {\n    super(props);\n\n    // List of all listeners to media query changes.\n    this.mediaQueries = {};\n  }\n\n  componentDidMount() {\n    const { onMediaQueryChange } = this.props;\n    let initialScreenSize = null;\n\n    Object\n      .values(SCREEN_SIZES)\n      .forEach((screenSize) => {\n        // Try to match current media query.\n        this.mediaQueries[screenSize.id] = window.matchMedia(screenSize.mediaQuery);\n        if (this.mediaQueries[screenSize.id].matches) {\n          initialScreenSize = screenSize;\n        }\n\n        // Subscribe to media query changes.\n        this.mediaQueries[screenSize.id].addListener(\n          (screenSizeEntity => (e) => {\n            if (e.matches) {\n              onMediaQueryChange(screenSizeEntity.id);\n            }\n          })(screenSize),\n        );\n      });\n\n    // Setup initial media query match.\n    onMediaQueryChange(initialScreenSize.id);\n  }\n\n  componentWillUnmount() {\n    Object.values(this.mediaQueries).forEach(mediaQuery => mediaQuery.removeListener());\n  }\n\n  render() {\n    const { children } = this.props;\n\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col\">\n            {children}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import PropTypes from 'prop-types';\n\n// PropType for Redux store object.\nexport const storePropType = PropTypes.shape({\n  dispatch: PropTypes.func.isRequired,\n  getState: PropTypes.func.isRequired,\n  subscribe: PropTypes.func.isRequired,\n  replaceReducer: PropTypes.func.isRequired,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Layout } from '../../components/shared/layout/Layout';\nimport { layoutResize } from '../../actions/layoutActions';\n\nexport class LayoutContainer extends React.Component {\n  static propTypes = {\n    children: PropTypes.oneOfType([\n      PropTypes.arrayOf(PropTypes.node),\n      PropTypes.node,\n    ]).isRequired,\n    layoutResize: PropTypes.func.isRequired,\n  };\n\n  onMediaQueryChange = (screenSize) => {\n    const { layoutResize: layoutResizeCallback } = this.props;\n    layoutResizeCallback(screenSize);\n  };\n\n  render() {\n    const { children } = this.props;\n\n    return (\n      <Layout onMediaQueryChange={this.onMediaQueryChange}>\n        {children}\n      </Layout>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  layoutResize,\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps,\n)(LayoutContainer);\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport RoutesConnected from './Routes';\nimport { Header } from './components/shared/header/Header';\nimport { storePropType } from './types/reduxTypes';\nimport { APP_BASE_URL } from './config';\nimport 'open-iconic/font/css/open-iconic-bootstrap.min.css';\nimport LayoutContainerConnected from './containers/layoutContainer/LayoutContainer';\n\nexport class App extends React.Component {\n  static propTypes = {\n    store: storePropType.isRequired,\n  };\n\n  render() {\n    const { store } = this.props;\n\n    return (\n      <Provider store={store}>\n        <BrowserRouter basename={APP_BASE_URL}>\n          <LayoutContainerConnected>\n            <Header />\n            <RoutesConnected />\n          </LayoutContainerConnected>\n        </BrowserRouter>\n      </Provider>\n    );\n  }\n}\n","import { combineReducers } from 'redux';\nimport { searchResultsReducer } from './searchResultsReducer';\nimport { searchParamsReducer } from './searchParamsReducer';\nimport { layoutReducer } from './layoutReducer';\n\n// Root reducer will serve as a container for other reducers.\nexport const rootReducer = combineReducers({\n  searchResults: searchResultsReducer,\n  searchParams: searchParamsReducer,\n  layout: layoutReducer,\n});\n","import { applyMiddleware, createStore, compose } from 'redux';\nimport promise from 'redux-promise-middleware';\nimport thunk from 'redux-thunk';\nimport { rootReducer } from './reducers/rootReducer';\n\n// Add support of browser Redux debugger.\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n// Add middleware to be able to use promises and chains of actions.\nconst middleware = applyMiddleware(\n  promise, // Allows to put promise() into action.payload.\n  thunk, // Allows to dispatch(function()) that will accept `dispatch` as a parameter.\n);\n\n// Create Redux store for the application.\nexport const store = createStore(\n  rootReducer,\n  composeEnhancers(middleware),\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport { store } from './store';\n\n// Get DOM container for React application.\nconst rootContainer = document.getElementById('root');\n\n// Render the application.\nReactDOM.render(\n  <App store={store} />,\n  rootContainer,\n);\n"],"sourceRoot":""}